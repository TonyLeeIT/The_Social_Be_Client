{"ast":null,"code":"import { useState, useCallback } from 'react';\nexport const useApi = asyncFunc => {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [err, setErr] = useState(null);\n  const execute = useCallback((...args) => {\n    setLoading(true);\n    asyncFunc().then(res => {\n      setResult(res);\n      setErr(null);\n    }).catch(err => {\n      setResult(null);\n      setErr(err);\n    }).finally(() => {\n      setLoading(true);\n    });\n  }, [asyncFunc]);\n  return [{\n    loading,\n    result,\n    err\n  }, execute];\n};","map":{"version":3,"sources":["H:/projectreactjs/the_social_12_9/src/hooks/useApi.js"],"names":["useState","useCallback","useApi","asyncFunc","loading","setLoading","result","setResult","err","setErr","execute","args","then","res","catch","finally"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,MAAM,GAAIC,SAAD,IAAe;AAEjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,IAAD,CAA9B;AAEA,QAAMU,OAAO,GAAGT,WAAW,CAAC,CAAC,GAAGU,IAAJ,KAAa;AACrCN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,SAAS,GAAGS,IAAZ,CAAkBC,GAAD,IAAS;AAEtBN,MAAAA,SAAS,CAACM,GAAD,CAAT;AACAJ,MAAAA,MAAM,CAAC,IAAD,CAAN;AACH,KAJD,EAIGK,KAJH,CAIUN,GAAD,IAAS;AAEdD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KARD,EAQGO,OARH,CAQW,MAAM;AACbV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAVD;AAWH,GAb0B,EAaxB,CAACF,SAAD,CAbwB,CAA3B;AAeA,SAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWE,IAAAA,MAAX;AAAmBE,IAAAA;AAAnB,GAAD,EAA2BE,OAA3B,CAAP;AACH,CAtBM","sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nexport const useApi = (asyncFunc) => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [result, setResult] = useState(null);\r\n    const [err, setErr] = useState(null);\r\n\r\n    const execute = useCallback((...args) => {\r\n        setLoading(true)\r\n        asyncFunc().then((res) => {\r\n\r\n            setResult(res);\r\n            setErr(null);\r\n        }).catch((err) => {\r\n\r\n            setResult(null);\r\n            setErr(err);\r\n        }).finally(() => {\r\n            setLoading(true);\r\n        })\r\n    }, [asyncFunc])\r\n\r\n    return [{ loading, result, err }, execute]\r\n}"]},"metadata":{},"sourceType":"module"}